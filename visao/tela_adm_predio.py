# View - tela_adm_predio.py
# Interface em Streamlit, recebe o input do usu√°rio, chama o controller, mostra o feedback.

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from controladores.controlador_maquina import ControladorMaquina
from controladores.controlador_reserva import ControladorReserva
from controladores.controlador_usuario import ControladorUsuario

# Inicializa√ß√£o dos controladores:
controlador_maquina = ControladorMaquina()
controlador_reserva = ControladorReserva()
controlador_usuario = ControladorUsuario()


# Tela de Gerenciamento de M√°quinas:
def gerenciar_maquinas():

    st.subheader("‚öôÔ∏è Gerenciamento de M√°quinas")
    st.markdown("---")

    # Cadastrar M√°quinas - Formul√°rio
    with st.expander("‚ûï Cadastrar Nova M√°quina"):
        with st.form("nova_maquina"):
            codigo = st.text_input("C√≥digo da M√°quina (ex: LAV-01, SEC-07)")
            tipo = st.selectbox("Tipo da M√°quina", ["lavadora", "secadora"])
            capacidade = st.text_input("Capacidade (ex: 8kg)")
            status = st.selectbox("Status Inicial", ["livre", "em_uso", "manutencao"])
            btn = st.form_submit_button("Cadastrar")
            if btn:
                try:
                    new_id = controlador_maquina.cadastrar_maquina(
                        st.session_state["id_lavanderia"], codigo, tipo, capacidade, status
                    )
                    st.success(f"M√°quina cadastrada com sucesso!")
                except Exception as e:
                    st.error(str(e))

    st.markdown("---")

    # Listar as Maquinas Cadastradas
    st.subheader("üìã M√°quinas cadastradas")

    maquinas = controlador_maquina.listar_por_lavanderia(st.session_state["id_lavanderia"])
    if not maquinas:
        st.info("Nenhuma m√°quina cadastrada para esta Lavanderia!")
    else:
        for maq in maquinas:
            with st.expander(f"‚öôÔ∏è {maq.codigo_maquina} - {maq.tipo_maquina.capitalize()} ({maq.capacidade})"):
                st.write(f"**Status atual:** {maq.status_maquina}")
                st.write(f"**Tipo:** {maq.tipo_maquina}")
                st.write(f"**Capacidade:** {maq.capacidade}")
                
                col1, col2 = st.columns([1, 1])
                with col1:
                    if st.button(f"‚úèÔ∏è Editar", key=f"edit_{maq.id_maquina}"):
                        st.session_state["editar_maquina"] = maq.id_maquina
                        st.rerun()
                with col2:
                    if st.button(f"üóëÔ∏è Excluir", key=f"del_{maq.id_maquina}"):
                        try:
                            ok = controlador_maquina.remover_maquina(maq.id_maquina)
                            if ok:
                                st.success("M√°quina removida com sucesso!")
                                st.rerun()
                            else:
                                st.error("Erro ao remover m√°quina.")
                        except Exception as e:
                            st.error(str(e))

    # Caso tenha clicado em Editar, mostra o formul√°rio:
    if "editar_maquina" in st.session_state:
        maq_id = st.session_state["editar_maquina"]
        maquina = controlador_maquina.obter(maq_id)

        st.markdown("### ‚úèÔ∏è Editar M√°quina")
        with st.form("form_editar_maquina"):
            codigo_novo = st.text_input("C√≥digo Novo", maquina.codigo_maquina)
            tipo_novo = st.selectbox(
                "Tipo", ["lavadora", "secadora"], index=["lavadora", "secadora"].index(maquina.tipo_maquina)
            )
            capacidade_nova = st.text_input("Capacidade", maquina.capacidade)
            status_novo = st.selectbox(
                "Status", ["livre", "em_uso", "manutencao"],
                index=["livre", "em_uso", "manutencao"].index(maquina.status_maquina)
            )
            btn_salvar = st.form_submit_button("üíæ Salvar altera√ß√µes")

            if btn_salvar:
                campos = {
                    "codigo_maquina": codigo_novo,
                    "tipo_maquina": tipo_novo,
                    "capacidade": capacidade_nova,
                    "status_maquina": status_novo
                }
                try:
                    ok = controlador_maquina.editar_maquina(maq_id, campos)
                    if ok:
                        st.success("M√°quina atualizada com sucesso!")
                        del st.session_state["editar_maquina"]
                        st.rerun()
                    else:
                        st.warning("Nenhuma altera√ß√£o detectada.")
                except Exception as e:
                    st.error(str(e))

        if st.button("‚¨ÖÔ∏è Cancelar edi√ß√£o"):
            del st.session_state["editar_maquina"]
            st.rerun()

    if st.button("‚¨ÖÔ∏è Voltar"):
        st.session_state.subpagina_adm_predio = None
        st.rerun()


# Tela de Relat√≥rios:
def abrir_relatorios():
    st.title("üìä Relat√≥rios de Uso da Lavanderia")
    st.markdown("---")

    id_lavanderia = st.session_state.get("id_lavanderia")
    if not id_lavanderia:
        st.error("‚ùå ID da lavanderia n√£o encontrado. Fa√ßa login novamente.")
        return

    with st.container():
        st.subheader("üìÖ Filtro de Per√≠odo")
        col1, col2, col3 = st.columns([2, 2, 1])
        with col1:
            data_inicial = st.date_input("**Data inicial**")
        with col2:
            data_final = st.date_input("**Data final**")
        with col3:
            gerar_btn = st.button("üöÄ **Gerar Relat√≥rio**", use_container_width=True, type="primary")

    if gerar_btn:
        try:
            if data_final < data_inicial:
                st.error("‚ùå A data final n√£o pode ser anterior √† data inicial.")
                return

            maquinas = controlador_maquina.listar_por_lavanderia(id_lavanderia)
            if not maquinas:
                st.info("‚ÑπÔ∏è Nenhuma m√°quina cadastrada nesta lavanderia.")
                return

            with st.spinner("üîç Buscando dados..."):
                todas_reservas = controlador_reserva.listar_reservas_periodo(
                    id_lavanderia, data_inicial.strftime("%Y-%m-%d"), data_final.strftime("%Y-%m-%d")
                )

            if not todas_reservas:
                st.info("üì≠ Nenhuma reserva encontrada nesse per√≠odo.")
            else:
                dados = []
                for reserva in todas_reservas:
                    dados.append({
                        "ID Reserva": reserva.id_reserva,
                        "M√°quina": reserva.id_maquina,
                        "Data": reserva.data_reserva,
                        "Hora In√≠cio": reserva.hora_inicio,
                        "Hora Fim": reserva.hora_fim,
                        "Usu√°rio": reserva.id_usuario,
                        "Status": reserva.status_reserva
                    })
                
                df = pd.DataFrame(dados)
                st.markdown("---")
                st.subheader("üìà Vis√£o Geral")

                col1, col2, col3 = st.columns(3)
                col1.metric("Total de Reservas", len(df))
                col2.metric("M√°quinas Utilizadas", df["M√°quina"].nunique())
                col3.metric("Usu√°rios √önicos", df["Usu√°rio"].nunique())

                st.markdown("---")
                st.subheader("üìä Reservas por M√°quina")
                reservas_por_maquina = df["M√°quina"].value_counts()
                fig, ax = plt.subplots()
                reservas_por_maquina.plot(kind="bar", ax=ax)
                st.pyplot(fig)

        except Exception as e:
            st.error(f"‚ùå Erro ao gerar relat√≥rio: {str(e)}")

    st.markdown("---")
    if st.button("‚¨ÖÔ∏è Voltar para o Menu Principal"):
        st.session_state.subpagina_adm_predio = None
        st.rerun()


# Tela inicial do Administrador do Pr√©dio:
def tela_adm_predio():

    st.title("üë®‚Äçüíº √Årea do Administrador do Pr√©dio")
    st.markdown("---")

    st.sidebar.title("Menu")
    if "usuario" in st.session_state:
        st.sidebar.write(f"üë§ Usu√°rio: {st.session_state['usuario']}")
    if st.sidebar.button("üö™ Sair"):
        st.session_state.clear()
        st.rerun()

    codigo_lavanderia = st.session_state.get("codigo_lavanderia", "N√£o Definido")
    st.subheader(f"Lavanderia: **{codigo_lavanderia}**")
    st.markdown("---")

    if st.session_state.get("subpagina_adm_predio") == "gerenciar_maquinas":
        gerenciar_maquinas()
        return
    elif st.session_state.get("subpagina_adm_predio") == "abrir_relatorios":
        abrir_relatorios()
        return

    # --- NOVAS ABAS PRINCIPAIS ---
    tab1, tab2, tab3 = st.tabs(["‚öôÔ∏è Gerenciar M√°quinas", "üìä Relat√≥rios", "üë§ Meu Perfil"])

    with tab1:
        st.subheader("‚öôÔ∏è Gerenciar M√°quinas")
        if st.button("Abrir Gerenciamento", use_container_width=True, key="btn_maquinas"):
            st.session_state["subpagina_adm_predio"] = "gerenciar_maquinas"
            st.rerun()

    with tab2:
        st.subheader("üìä Relat√≥rios")
        if st.button("Abrir Relat√≥rios", use_container_width=True, key="btn_relatorios"):
            st.session_state["subpagina_adm_predio"] = "abrir_relatorios"
            st.rerun()

    with tab3:
        st.subheader("üë§ Editar Informa√ß√µes do Perfil")

        usuario_logado = st.session_state.get("usuario_dados")
        if not usuario_logado:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel carregar suas informa√ß√µes. Fa√ßa login novamente.")
        else:
            with st.form("form_editar_perfil_adm_predio"):
                nome = st.text_input("Nome", value=usuario_logado["nome"])
                email = st.text_input("Email", value=usuario_logado["email"])
                telefone = st.text_input("Telefone", value=usuario_logado["telefone"])
                senha_atual = st.text_input("Senha Atual*", type="password")
                nova_senha = st.text_input("Nova Senha (opcional)", type="password")

                salvar = st.form_submit_button("üíæ Salvar Altera√ß√µes")

                if salvar:
                    try:
                        sucesso = controlador_usuario.editar_perfil(
                            id_usuario=usuario_logado["id_usuario"],
                            nome=nome,
                            email=email,
                            telefone=telefone,
                            senha_atual=senha_atual,
                            nova_senha=nova_senha if nova_senha else None
                        )
                        if sucesso:
                            st.success("‚úÖ Perfil atualizado com sucesso!")
                            st.session_state["usuario_dados"]["nome"] = nome
                            st.session_state["usuario_dados"]["email"] = email
                            st.session_state["usuario_dados"]["telefone"] = telefone
                            st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Erro: {str(e)}")


# Execu√ß√£o Principal
tela_adm_predio()
